const { pgPool, selectQuery, deleteQuery, insertQuery, updateQuery, ConfirmationStatus } = require("./utils/db_utils");
const { HearManager } = require("@vk-io/hear");

const noLinks = { dont_parse_links: true };
const noPreview = { disable_web_page_preview: true };
const MAX_UPLOAD_SIZE = 50_000_000;

const VkBot = (telegram, vk, vkUser) => {
    const start = async (ctx) => {
        /* –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ */
        const args = ctx.message.text.split(" ");
        if (args.length !== 1) {
            return ctx.send("‚ùå –£ –∫–æ–º–∞–Ω–¥—ã /start –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤");
        }

        await ctx.send(
            "–ü—Ä–∏–≤–µ—Ç! üëã –≠—Ç–æ—Ç –±–æ—Ç —É–º–µ–µ—Ç –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å –≤–∏–¥–µ–æ, \"–∫—Ä—É–∂–∫–∏\", –∞—É–¥–∏–æ, –≥—Å, —Ñ–æ—Ç–æ, –≥—Ä–∞—Ñ—Ñ–∏—Ç–∏, " +
            "—Å—Ç–∏–∫–µ—Ä—ã (–∫—Ä–æ–º–µ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö), —Ç–µ–∫—Å—Ç –∏ —Ñ–∞–π–ª—ã –∏–∑ VK –≤ Telegram." +
            "–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ - —Ä–∞–∑–º–µ—Ä –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞ (–≤ —Ç.—á. –≤–∏–¥–µ–æ) –Ω–µ –±–æ–ª—å—à–µ 50 –ú–±."
        );
        await ctx.send(
            "–î–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–∞—Ä–Ω—ã–π –±–æ—Ç –≤ TG (https://t.me/fwd2vk_bot). " +
            "–í—Å—ë, —á—Ç–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ –±–æ—Ç—É –≤ VK, –±–æ—Ç –≤ TG –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è! üòâ",
            noLinks
        );
        await ctx.send(
            "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É, –±–æ—Ç—É –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å –≤–∞—à id –≤ TG. –£–∫–∞–∂–∏—Ç–µ –µ–≥–æ: /set_tg_id 12345678 " +
            "(–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–≤–æ–¥–∏—Ç—å –∏–º–µ–Ω–Ω–æ —Ç–∞–∫, —á–∏—Å–ª–æ–º)."
        );
        return ctx.send("–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –≤—ã–∑–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /help");
    }

    const help = async (ctx) => {
        /* –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ */
        const args = ctx.message.text.split(" ");
        if (args.length !== 1) {
            return ctx.send("‚ùå –£ –∫–æ–º–∞–Ω–¥—ã /help –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤");
        }

        return ctx.send(
            "–°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∫–æ–º–∞–Ω–¥:\n\n" +
            "    /help - –≤—ã–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥)\n\n" +
            "    /start - –≤—ã–≤–µ—Å—Ç–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n" +
            "    /set_tg_id id - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å id –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ TG; id –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º\n\n" +
            "    /delete_info - —É–¥–∞–ª–∏—Ç—å –∏–∑ –±–æ—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–∏—Ö TG –∏ VK"
        );
    }

    const setTgId = async (ctx) => {
        /* –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ */
        const args = ctx.text.split(" ");
        if (args.length !== 2 || isNaN(parseInt(args[1]))) {
            await ctx.send("‚ùå –£ –∫–æ–º–∞–Ω–¥—ã /set_tg_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä - –≤–∞—à id –≤ TG (—á–∏—Å–ª–æ, –Ω–µ username)");
            return ctx.send("–ù–∞–ø—Ä–∏–º–µ—Ä: /set_tg_id 12345678");
        }
        const vkId = ctx.peerId.toString();
        const tgId = args[1];

        try {
            /* –î–æ—Å—Ç–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ */
            const select = await pgPool.query(selectQuery, [vkId, tgId]);
            const row = select.rows[0];
            const status = row?.status;
            const id = row?.id;

            /* –ï—Å–ª–∏ –≤ –±–∞–∑–µ —É–∂–µ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º id –≤ TG, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º */
            const vkIdMatches = row?.vk_id.toString() === vkId;
            const tgIdMatches = row?.tg_id.toString() === tgId;
            if ((select.rowCount > 1) || (!vkIdMatches && tgIdMatches)) {
                await ctx.send("–£–ø—Å... ‚õî –≠—Ç–æ—Ç TG id —Å–≤—è–∑–∞–Ω —Å id –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è VK!");
                await ctx.send("–ï—Å–ª–∏ –≤—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ TG id - –≤–µ—Ä–Ω—ã–π, –≤–æ–∑–º–æ–∂–Ω–æ, –≤—ã –æ—à–∏–±–ª–∏—Å—å, –∫–æ–≥–¥–∞ —É–∫–∞–∑—ã–≤–∞–ª–∏ VK id –±–æ—Ç—É –≤ TG? ü§î");
                await ctx.send("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ—Ç—É –≤ TG (https://t.me/fwd2vk_bot) –∫–æ–º–∞–Ω–¥—É:", noLinks);
                return ctx.send(`/set_vk_id ${vkId}`);
            }

            /* –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç, —Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º */
            if (status === ConfirmationStatus.CONFIRMED && tgIdMatches) {
                return ctx.send("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ —Å–≤—è–∑–∞–Ω —Å —ç—Ç–∏–º TG id. –ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è! üòâ");
            }

            /* –ï—Å–ª–∏ –æ–∂–∏–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ –≤ VK –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ—Ç, —Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∑–∞–ø–∏—Å—å */
            if (status === ConfirmationStatus.WAIT_VK && tgIdMatches) {
                const chat = await telegram.getChat(tgId);
                await pgPool.query(updateQuery, [vkId, tgId, ConfirmationStatus.CONFIRMED, id]);
                await ctx.send("–í–∞—à id –≤ TG —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! ‚úÖ");
                await ctx.send(`–ë–æ—Ç –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å—é–¥–∞: https://t.me/${chat.username}`);
                await telegram.sendMessage(tgId, "–í–∞—à id –≤ VK —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! ‚úÖ")
                return telegram.sendMessage(tgId, `–ë–æ—Ç –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å—é–¥–∞: https://vk.com/id${vkId}`);
            }

            /* –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ –≤ TG (–∫—Ä–æ–º–µ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –æ–Ω–æ —É–∂–µ –±—ã–ª–æ –∑–∞–ø—Ä–æ—à–µ–Ω–æ —Å —Ç–∞–∫–∏–º –∂–µ id) */
            if (!(status === ConfirmationStatus.WAIT_TG && tgIdMatches)) {
                if (row) {
                    await pgPool.query(updateQuery, [vkId, tgId, ConfirmationStatus.WAIT_TG, id]);
                } else {
                    await pgPool.query(insertQuery, [vkId, tgId, ConfirmationStatus.WAIT_TG]);
                }
            }
            await ctx.send("–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –æ—Ç–∫—Ä–æ–π—Ç–µ –±–æ—Ç–∞ –≤ TG (https://t.me/fwd2vk_bot) –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–º—É –∫–æ–º–∞–Ω–¥—É:", noLinks);
            return ctx.send(`/set_vk_id ${vkId}`);
        } catch (error) {
            return dbErrorHandler(ctx, error);
        }
    }

    const deleteInfo = async (ctx) => {
        /* –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ */
        const args = ctx.message.text.split(" ");
        if (args.length !== 1) {
            return ctx.send("‚ùå –£ –∫–æ–º–∞–Ω–¥—ã /delete_info –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤");
        }

        try {
            /* –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ –µ–≥–æ vk_id */
            const vkId = ctx.peerId;
            await pgPool.query(deleteQuery, [vkId, 0]);
            return ctx.send("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å—Ç–µ—Ä—Ç—ã! ‚úÖ");
        } catch (error) {
            return dbErrorHandler(ctx, error);
        }
    }

    const checkPairing = async (ctx, next) => {
        try {
            /* –î–æ—Å—Ç–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ –µ–≥–æ vk_id */
            const vkId = ctx.peerId;
            const select = await pgPool.query(selectQuery, [vkId, 0]);
            const row = select.rows[0];
            const tgId = row?.tg_id;

            /* –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–Ω–µ–µ –Ω–µ —É–∫–∞–∑–∞–ª —Å–≤–æ–π tg_id, —Ç–æ –∑–∞–ø–∏—Å–∏ –æ –Ω—ë–º –≤ –ë–î –Ω–µ—Ç */
            if (!row) {
                await ctx.send("‚ùå –ë–æ—Ç –Ω–µ –∑–Ω–∞–µ—Ç, –∫—É–¥–∞ –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ - —É–∫–∞–∂–∏—Ç–µ –µ–º—É —Å–≤–æ–π id –≤ TG");
                return ctx.send("–ù–∞–ø—Ä–∏–º–µ—Ä: /set_tg_id 12345678");
            }

            /* –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ –≤ VK */
            if (row.status === ConfirmationStatus.WAIT_VK) {
                await ctx.send("‚ùå –í–∞—à id –≤ TG –ø–æ–∫–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω");
                return ctx.send("–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É, –∫–æ—Ç–æ—Ä—É—é –≤–∞–º –æ—Ç–ø—Ä–∞–≤–∏–ª –±–æ—Ç –≤ TG (https://t.me/fwd2vk_bot)", noLinks);
            }

            /* –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ –≤ TG */
            if (row.status === ConfirmationStatus.WAIT_TG) {
                ctx.send("‚ùå –í–∞—à id –≤ TG –ø–æ–∫–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω");
                await ctx.send("–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –æ—Ç–∫—Ä–æ–π—Ç–µ –±–æ—Ç–∞ –≤ TG (https://t.me/fwd2vk_bot) –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–º—É –∫–æ–º–∞–Ω–¥—É:", noLinks);
                return ctx.send(`/set_vk_id ${vkId}`);
            }

            /* –ü–æ–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º */
            await vk.api.messages.markAsRead({ peer_id: vkId });

            /* –í—ã–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ */
            ctx.tgId = tgId;
            ctx.vkId = vkId;
            return next();
        } catch (error) {
            return dbErrorHandler(ctx, error);
        }
    }

    const uploadDocument = async (ctx, document, extra) => {
        /* –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π */
        if (document.size > MAX_UPLOAD_SIZE) {
            await ctx.send("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ—Ç —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π üòî");
            return ctx.send("–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è Telegram Bot API –∑–∞–ø—Ä–µ—â–∞–µ—Ç –±–æ—Ç–∞–º –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–∞–π–ª—ã –≤–µ—Å–æ–º –±–æ–ª—å—à–µ 50 –ú–±")
        }

        /* –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Ñ–∞–π–ª –≤ TG */
        return telegram.sendDocument(ctx.tgId, document.url, extra).catch((error) => tgSendErrorHandler(ctx, error));
    }

    const uploadPhoto = async (ctx, photo, extra) => {
        /* –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ –≤ TG */
        return telegram.sendPhoto(ctx.tgId, photo.largeSizeUrl, extra).catch((error) => tgSendErrorHandler(ctx, error));
    }

    const uploadVideo = async (ctx, video, extra) => {
        /* –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ */
        const { items } = await vkUser.api.video.get({
            videos: `${video.ownerId}_${video.id}`,
            extended: 0,
        });
        if (!items?.length) {
            return ctx.send("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ üòî");
        }

        /* –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –∏–∑ –∫–æ–¥–∞ –ø–ª–µ–µ—Ä–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ */
        const urls = await fetch(items[0].player)
            .then((response) => response.text())
            .then((text) => {
                return [...text.matchAll(/"url\d+":"(.+?)"/g)];
            })
        if (!urls?.length) {
            return ctx.send("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ üòî");
        }

        /* –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ –≤ –±—É—Ñ—Ñ–µ—Ä (—É–≤—ã, –∏–Ω–∞—á–µ –Ω–∏–∫–∞–∫) */
        const url = urls.pop()[1].replaceAll("\\", "");
        const arrayBuffer = await fetch(url).then((response) => response.arrayBuffer());

        /* –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∏–¥–µ–æ –Ω–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ */
        if (arrayBuffer.byteLength > MAX_UPLOAD_SIZE) {
            await ctx.send("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ –≤–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ üòî");
            return ctx.send("–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è Telegram Bot API –∑–∞–ø—Ä–µ—â–∞–µ—Ç –±–æ—Ç–∞–º –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–∞–π–ª—ã –≤–µ—Å–æ–º –±–æ–ª—å—à–µ 50 –ú–±")
        }

        /* –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ—Å–ª–∞—Ç—å –≤–∏–¥–µ–æ –≤ TG */
        return telegram.sendVideo(ctx.tgId, { source: Buffer.from(arrayBuffer) }, extra).catch((error) => tgSendErrorHandler(ctx, error));
    }

    const uploadAudio = async (ctx, audio, extra) => {
        /* –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ—Å–ª–∞—Ç—å –∞—É–¥–∏–æ –≤ TG */
        return telegram.sendAudio(ctx.tgId, audio.url, extra)
            .catch((error) => tgSendErrorHandler(ctx, error));
    }

    const uploadVoice = async (ctx, voice) => {
        /* –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ—Å–ª–∞—Ç—å –≥—Å –≤ TG */
        return telegram.sendVoice(ctx.tgId, voice.oggUrl).catch((error) => tgSendErrorHandler(ctx, error));
    }

    const uploadSticker = async (ctx, sticker) => {
        /* –ù–µ –≤—Å–µ —Å—Ç–∏–∫–µ—Ä—ã –º–æ–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å */
        if (!sticker.images?.length) {
            return unsupportedMessageHandler(ctx);
        }

        /* –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å—Ç–∏–∫–µ—Ä –≤ TG */
        return telegram.sendPhoto(ctx.tgId, sticker.images.pop().url).catch((error) => tgSendErrorHandler(ctx, error));
    }

    const uploadGraffiti = async (ctx, graffiti) => {
        /* –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ—Å–ª–∞—Ç—å –≥—Ä–∞—Ñ—Ñ–∏—Ç–∏ –≤ TG */
        return telegram.sendPhoto(ctx.tgId, graffiti.url).catch((error) => tgSendErrorHandler(ctx, error));
    }

    const forwardMessage = async (ctx) => {
        /* –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ */
        await ctx.loadMessagePayload({ force: true });

        /* –ï—Å–ª–∏ –µ—Å—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è, —Ç–æ —Ä–∞–∑–±–∏—Ä–∞–µ–º –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –∏—Ö */
        let extra = { caption: ctx.text };
        for (const attachment of (ctx.attachments ?? [])) {
            await attachment.loadAttachmentPayload({ force: true }); // –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–ª–æ–∂–µ–Ω–∏–∏
            switch (attachment.type) {
                case "doc":
                    await uploadDocument(ctx, attachment, extra);
                    extra = {};
                    break;
                case "photo":
                    await uploadPhoto(ctx, attachment, extra);
                    extra = {};
                    break;
                case "video":
                    await uploadVideo(ctx, attachment, extra);
                    extra = {};
                    break;
                case "audio":
                    await uploadAudio(ctx, attachment, extra);
                    extra = {};
                    break;
                case "audio_message":
                    await uploadVoice(ctx, attachment);
                    extra = {};
                    break;
                case "sticker":
                    await uploadSticker(ctx, attachment);
                    break;
                case "graffiti":
                    await uploadGraffiti(ctx, attachment);
                    break;
                case "link":
                    break;
                default:
                    await unsupportedMessageHandler(ctx);
            }
        }

        /* –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç –∏ –æ–Ω –Ω–µ –±—ã–ª –≤—Å—Ç–∞–≤–ª–µ–Ω –∫–∞–∫ –ø–æ–¥–ø–∏—Å—å, –ø—Ä–æ–±—É–µ–º –µ–≥–æ –ø–µ—Ä–µ—Å–ª–∞—Ç—å –≤ TG */
        if (extra.caption && ctx.text) {
            return telegram.sendMessage(ctx.tgId, ctx.text).catch((error) => tgSendErrorHandler(ctx, error));
        }
    }

    const flattenAndForwardMessage = async (ctx) => {
        /* –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –≤—Å–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–µ, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —Å—Å—ã–ª–∞–µ—Ç—Å—è –¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ VK) */
        await forwardMessage(ctx);
        for (const fwdCtx of ctx.forwards) {
            fwdCtx.vkId = ctx.vkId;
            fwdCtx.tgId = ctx.tgId;
            const from = `‚¨á –û—Ç vk.com/${fwdCtx.senderId > 0 ? "id" + fwdCtx.senderId : "club" + -fwdCtx.senderId} ‚¨á`
            await telegram.sendMessage(fwdCtx.tgId, from, noPreview).catch((error) => tgSendErrorHandler(ctx, error));
            await flattenAndForwardMessage(fwdCtx);
        }
    };

    const dbErrorHandler = async (ctx, error) => {
        console.log(error);
        await ctx.send("–í–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö üò¨");
        return ctx.send("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!");
    }

    const tgSendErrorHandler = async (ctx, error) => {
        console.log(error);
        const chat = await telegram.getChat(ctx.tgId);
        if (chat) {
            await ctx.send(`–ë–æ—Ç –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º https://t.me/${chat.username}, –Ω–æ –Ω–µ —Å–º–æ–≥ üòî`);
        } else {
            await ctx.send(`–ë–æ—Ç –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å TG id ${ctx.tgId}, –Ω–æ –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Å –Ω–∏–º —á–∞—Ç üòî`);
        }
        return ctx.send("–í–æ–∑–º–æ–∂–Ω–æ, id —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Å –Ω–∞—à–∏–º –±–æ—Ç–æ–º –≤ TG (https://t.me/fwd2vk_bot)");
    }

    const unsupportedMessageHandler = (ctx) => {
        return ctx.send("‚ùå –≠—Ç–æ—Ç —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è");
    }

    const hearManager = new HearManager();
    hearManager.hear(/\/start.*/, start);
    hearManager.hear(/\/help.*/, help);
    hearManager.hear(/\/set_tg_id.*/, setTgId);
    hearManager.hear(/\/delete_info.*/, deleteInfo);

    vk.updates.use(hearManager.middleware);
    vk.updates.use(checkPairing);
    vk.updates.use(flattenAndForwardMessage);

    const handleUpdate = (update) => {
        return vk.updates.handleWebhookUpdate(update);
    }

    return { handleUpdate };
}

module.exports = { VkBot };