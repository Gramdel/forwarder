const { pgPool, selectQuery, insertQuery, updateQuery, ConfirmationStatus } = require("./utils/db_utils");
const { HearManager } = require("@vk-io/hear");

const noLinks = { dont_parse_links: true };
const noPreview = { disable_web_page_preview: true };
const MAX_UPLOAD_SIZE = 50_000_000;

const VkBot = (vk, telegram) => {
    const setTgId = async (ctx) => {
        /* –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ */
        const args = ctx.text.split(" ");
        if (args.length !== 2 || isNaN(parseInt(args[1]))) {
            await ctx.send("–£ –∫–æ–º–∞–Ω–¥—ã /set_tg_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä - –≤–∞—à id –≤ TG (—á–∏—Å–ª–æ, –Ω–µ username).");
            return ctx.send("–ù–∞–ø—Ä–∏–º–µ—Ä: /set_tg_id 12345678");
        }

        /* –î–æ—Å—Ç–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ –µ–≥–æ vk_id */
        const vkId = ctx.peerId.toString();
        const tgId = args[1];
        const select = await pgPool.query(selectQuery, [vkId, tgId]);
        const row = select.rows[0];
        const status = row?.status;
        const id = row?.id;

        /* –ï—Å–ª–∏ –≤ –±–∞–∑–µ —É–∂–µ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º id –≤ TG, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º */
        const vkIdMatches = row?.vk_id.toString() === vkId;
        const tgIdMatches = row?.tg_id.toString() === tgId;
        if ((select.rowCount > 1) || (!vkIdMatches && tgIdMatches)) {
            await ctx.send("–£–ø—Å... –≠—Ç–æ—Ç TG id —Å–≤—è–∑–∞–Ω —Å id –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è VK!");
            await ctx.send("–ï—Å–ª–∏ –≤—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ TG id - –≤–µ—Ä–Ω—ã–π, –≤–æ–∑–º–æ–∂–Ω–æ, –≤—ã –æ—à–∏–±–ª–∏—Å—å, –∫–æ–≥–¥–∞ —É–∫–∞–∑—ã–≤–∞–ª–∏ VK id –±–æ—Ç—É –≤ TG");
            await ctx.send("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ—Ç—É –≤ TG (https://t.me/fwd2vk_bot) –∫–æ–º–∞–Ω–¥—É:", noLinks);
            return ctx.send(`/set_vk_id ${vkId}`);
        }

        /* –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç, —Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º */
        if (status === ConfirmationStatus.CONFIRMED && tgIdMatches) {
            return ctx.send("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ —Å–≤—è–∑–∞–Ω —Å —ç—Ç–∏–º TG id. –ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è!");
        }

        /* –ï—Å–ª–∏ –æ–∂–∏–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ –≤ VK –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ—Ç, —Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∑–∞–ø–∏—Å—å */
        if (status === ConfirmationStatus.WAIT_VK && tgIdMatches) {
            const chat = await telegram.getChat(tgId);
            await pgPool.query(updateQuery, [vkId, tgId, ConfirmationStatus.CONFIRMED, id]);
            await ctx.send("–í–∞—à id –≤ TG —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!");
            await ctx.send(`–ë–æ—Ç –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å—é–¥–∞: https://t.me/${chat.username}`);
            await telegram.sendMessage(tgId, "–í–∞—à id –≤ VK —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            return telegram.sendMessage(tgId, `–ë–æ—Ç –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å—é–¥–∞: https://vk.com/id${vkId}`);
        }

        /* –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ –≤ TG (–∫—Ä–æ–º–µ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –æ–Ω–æ —É–∂–µ –±—ã–ª–æ –∑–∞–ø—Ä–æ—à–µ–Ω–æ —Å —Ç–∞–∫–∏–º –∂–µ id) */
        if (!(status === ConfirmationStatus.WAIT_TG && tgIdMatches)) {
            if (row) {
                await pgPool.query(updateQuery, [vkId, tgId, ConfirmationStatus.WAIT_TG, id]);
            } else {
                await pgPool.query(insertQuery, [vkId, tgId, ConfirmationStatus.WAIT_TG]);
            }
        }
        await ctx.send("–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –æ—Ç–∫—Ä–æ–π—Ç–µ –±–æ—Ç–∞ –≤ TG (https://t.me/fwd2vk_bot) –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–º—É –∫–æ–º–∞–Ω–¥—É:", noLinks);
        return ctx.send(`/set_vk_id ${vkId}`);
    }

    const checkPairing = async (ctx, next) => {
        console.time("checkPairing");
        /* –î–æ—Å—Ç–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ –µ–≥–æ vk_id */
        const vkId = ctx.peerId;
        const select = await pgPool.query(selectQuery, [vkId, 0]);
        const row = select.rows[0];
        const tgId = row?.tg_id;

        /* –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–Ω–µ–µ –Ω–µ —É–∫–∞–∑–∞–ª —Å–≤–æ–π tg_id, —Ç–æ –∑–∞–ø–∏—Å–∏ –æ –Ω—ë–º –≤ –ë–î –Ω–µ—Ç */
        if (!row) {
            await ctx.send("–ë–æ—Ç –Ω–µ –∑–Ω–∞–µ—Ç, –∫—É–¥–∞ –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ - —É–∫–∞–∂–∏—Ç–µ –µ–º—É —Å–≤–æ–π id –≤ TG");
            return ctx.send("–ù–∞–ø—Ä–∏–º–µ—Ä: /set_tg_id 12345678");
        }

        /* –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ –≤ VK */
        if (row.status === ConfirmationStatus.WAIT_VK) {
            await ctx.send("–í–∞—à id –≤ TG –ø–æ–∫–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω");
            return ctx.send("–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É, –∫–æ—Ç–æ—Ä—É—é –≤–∞–º –æ—Ç–ø—Ä–∞–≤–∏–ª –±–æ—Ç –≤ TG (https://t.me/fwd2vk_bot)", noLinks);
        }

        /* –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ –≤ TG */
        if (row.status === ConfirmationStatus.WAIT_TG) {
            ctx.send("–í–∞—à id –≤ TG –ø–æ–∫–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω");
            await ctx.send("–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –æ—Ç–∫—Ä–æ–π—Ç–µ –±–æ—Ç–∞ –≤ TG (https://t.me/fwd2vk_bot) –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–º—É –∫–æ–º–∞–Ω–¥—É:", noLinks);
            return ctx.send(`/set_vk_id ${vkId}`);
        }

        /* –ü–æ–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º */
        await vk.api.messages.markAsRead({ peer_id: vkId });

        /* –í—ã–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ */
        ctx.tgId = tgId;
        ctx.vkId = vkId;
        console.timeEnd("checkPairing");
        return next();
    }

    const uploadDocument = async (ctx, document, extra) => {
        /* –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π */
        if (document.size > MAX_UPLOAD_SIZE) {
            await ctx.reply("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ—Ç —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π üòî");
            return ctx.reply("–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è Telegram Bot API –∑–∞–ø—Ä–µ—â–∞–µ—Ç –±–æ—Ç–∞–º –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–∞–π–ª—ã –≤–µ—Å–æ–º –±–æ–ª—å—à–µ 50 –ú–±")
        }

        /* –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Ñ–∞–π–ª –≤ TG */
        return telegram.sendDocument(ctx.tgId, document.url, extra).catch((error) => tgSendErrorHandler(ctx, error));
    }

    const uploadPhoto = async (ctx, photo, extra) => {
        /* –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ –≤ TG */
        return telegram.sendPhoto(ctx.tgId, photo.largeSizeUrl, extra).catch((error) => tgSendErrorHandler(ctx, error));
    }

    const uploadVideo = async (ctx, video, extra) => {
        /* –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ—Å–ª–∞—Ç—å –≤–∏–¥–µ–æ –≤ TG */
        return ctx.send(JSON.stringify(video));
        /*
        const url = await vk.api.video.get({
            videos: video.toString(),
        });

        const text = wall
            ? `Video from wall: ${video.items[0].player}`
            : `Video: ${video.items[0].player}`;
        await telegram.sendMessage(ctx.tgId, text, Extra.notifications(false));*/
    }

    const uploadAudio = async (ctx, audio, extra) => {
        /* –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ—Å–ª–∞—Ç—å –∞—É–¥–∏–æ –≤ TG */
        return telegram.sendAudio(ctx.tgId, audio.url, { performer: audio.artist, title: audio.title })
            .catch((error) => tgSendErrorHandler(ctx, error));
    }

    const uploadVoice = async (ctx, voice) => {
        /* –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ—Å–ª–∞—Ç—å –≥—Å –≤ TG */
        return telegram.sendVoice(ctx.tgId, voice.oggUrl).catch((error) => tgSendErrorHandler(ctx, error));
    }

    const uploadSticker = async (ctx, sticker) => {
        /* –ù–µ –≤—Å–µ —Å—Ç–∏–∫–µ—Ä—ã –º–æ–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å */
        if (!sticker.images?.length) {
            return unsupportedMessageHandler(ctx);
        }

        /* –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å—Ç–∏–∫–µ—Ä –≤ TG */
        return telegram.sendPhoto(ctx.tgId, sticker.images.pop().url).catch((error) => tgSendErrorHandler(ctx, error));
    }

    const uploadGraffiti = async (ctx, graffiti) => {
        /* –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ—Å–ª–∞—Ç—å –≥—Ä–∞—Ñ—Ñ–∏—Ç–∏ –≤ TG */
        return telegram.sendPhoto(ctx.tgId, graffiti.url).catch((error) => tgSendErrorHandler(ctx, error));
    }

    const forwardMessage = async (ctx) => {
        console.time("forwardMessage");
        /* –ï—Å–ª–∏ –µ—Å—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è, —Ç–æ —Ä–∞–∑–±–∏—Ä–∞–µ–º –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –∏—Ö */
        let extra = { caption: ctx.text };
        for (const attachment of (ctx.attachments ?? [])) {
            switch (attachment.type) {
                case "doc":
                    await uploadDocument(ctx, attachment, extra);
                    extra = {};
                    break;
                case "photo":
                    await uploadPhoto(ctx, attachment, extra);
                    extra = {};
                    break;
                case "video":
                    await uploadVideo(ctx, attachment, extra); // TODO
                    extra = {};
                    break;
                case "audio":
                    await uploadAudio(ctx, attachment, extra);
                    extra = {};
                    break;
                case "audio_message":
                    await uploadVoice(ctx, attachment);
                    extra = {};
                    break;
                case "sticker":
                    await uploadSticker(ctx, attachment);
                    break;
                case "graffiti":
                    await uploadGraffiti(ctx, attachment);
                    break;
                case "link":
                    break;
                default:
                    await unsupportedMessageHandler(ctx);
            }
        }

        /* –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç –∏ –æ–Ω –Ω–µ –±—ã–ª –≤—Å—Ç–∞–≤–ª–µ–Ω –∫–∞–∫ –ø–æ–¥–ø–∏—Å—å, –ø—Ä–æ–±—É–µ–º –µ–≥–æ –ø–µ—Ä–µ—Å–ª–∞—Ç—å –≤ TG */
        if (extra.caption && ctx.text) {
            return telegram.sendMessage(ctx.tgId, ctx.text).catch((error) => tgSendErrorHandler(ctx, error));
        }
        console.timeEnd("forwardMessage");
    }

    const flattenAndForwardMessage = async (ctx) => {
        /* –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –≤—Å–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–µ, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —Å—Å—ã–ª–∞–µ—Ç—Å—è –¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ VK) */
        await forwardMessage(ctx);
        for (const fwdCtx of ctx.forwards) {
            fwdCtx.vkId = ctx.vkId;
            fwdCtx.tgId = ctx.tgId;
            const from = `‚¨á –û—Ç vk.com/${fwdCtx.senderId > 0 ? "id" + fwdCtx.senderId : "club" + -fwdCtx.senderId} ‚¨á`
            await telegram.sendMessage(fwdCtx.tgId, from, noPreview).catch((error) => tgSendErrorHandler(ctx, error));
            await flattenAndForwardMessage(fwdCtx);
        }
    };

    const tgSendErrorHandler = async (ctx, error) => {
        console.log(error);
        const chat = await telegram.getChat(ctx.tgId);
        if (chat) {
            await ctx.send(`–ë–æ—Ç –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º https://t.me/${chat.username}, –Ω–æ –Ω–µ —Å–º–æ–≥ üòî`);
        } else {
            await ctx.send(`–ë–æ—Ç –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å TG id ${ctx.tgId}, –Ω–æ –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Å –Ω–∏–º —á–∞—Ç üòî`);
        }
        return ctx.send("–í–æ–∑–º–æ–∂–Ω–æ, id —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Å –Ω–∞—à–∏–º –±–æ—Ç–æ–º –≤ TG (https://t.me/fwd2vk_bot)");
    }

    const unsupportedMessageHandler = (ctx) => {
        return ctx.send("‚ùå –≠—Ç–æ—Ç —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è");
    }

    const hearManager = new HearManager();
    hearManager.hear(/\/set_tg_id.*/, setTgId);

    vk.updates.use(hearManager.middleware);
    vk.updates.use(checkPairing);
    vk.updates.use(flattenAndForwardMessage);

    const handleUpdate = (update) => {
        return vk.updates.handleWebhookUpdate(update);
    }

    return { handleUpdate };
}

module.exports = { VkBot };