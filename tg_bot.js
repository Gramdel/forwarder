const { pgPool, selectQuery, deleteQuery, insertQuery, updateQuery, ConfirmationStatus } = require("./utils/db_utils");

const noLinks = { dont_parse_links: true };
const noPreview = { disable_web_page_preview: true };
const MAX_DOWNLOAD_SIZE = 20_000_000;

const TgBot = (telegraf, vk) => {
    const start = async (ctx) => {
        /* –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ */
        const args = ctx.message.text.split(" ");
        if (args.length !== 1) {
            return ctx.reply("‚ùå –£ –∫–æ–º–∞–Ω–¥—ã /start –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤");
        }

        await ctx.reply(
            "–ü—Ä–∏–≤–µ—Ç! üëã –≠—Ç–æ—Ç –±–æ—Ç —É–º–µ–µ—Ç –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å –≤–∏–¥–µ–æ, \"–∫—Ä—É–∂–∫–∏\", –∞—É–¥–∏–æ, –≥—Å, —Ñ–æ—Ç–æ, " +
            "—Å—Ç–∏–∫–µ—Ä—ã (–∫—Ä–æ–º–µ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö), —Ç–µ–∫—Å—Ç –∏ —Ñ–∞–π–ª—ã –∏–∑ Telegram –≤ VK. " +
            "–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ - —Ä–∞–∑–º–µ—Ä –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞ (–≤ —Ç.—á. –≤–∏–¥–µ–æ) –Ω–µ –±–æ–ª—å—à–µ 20 –ú–±."
        );
        await ctx.reply(
            "–î–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–∞—Ä–Ω—ã–π –±–æ—Ç –≤ VK (https://vk.me/fwd2tg_bot). " +
            "–í—Å—ë, —á—Ç–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ –±–æ—Ç—É –≤ TG, –±–æ—Ç –≤ VK –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è! üòâ",
            noPreview
        );
        await ctx.replyWithMarkdownV2(
            "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É, –±–æ—Ç—É –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å –≤–∞—à id –≤ VK\\. –£–∫–∞–∂–∏—Ç–µ –µ–≥–æ: `/set_vk_id 12345678` " +
            "\\(–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–≤–æ–¥–∏—Ç—å –∏–º–µ–Ω–Ω–æ —Ç–∞–∫, —á–∏—Å–ª–æ–º\\)\\."
        );
        return ctx.reply("–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –≤—ã–∑–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /help");
    }

    const help = async (ctx) => {
        /* –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ */
        const args = ctx.message.text.split(" ");
        if (args.length !== 1) {
            return ctx.reply("‚ùå –£ –∫–æ–º–∞–Ω–¥—ã /help –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤");
        }

        return ctx.reply(
            "–°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∫–æ–º–∞–Ω–¥:\n\n" +
            "    /help - –≤—ã–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥)\n\n" +
            "    /start - –≤—ã–≤–µ—Å—Ç–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n" +
            "    /set_vk_id id - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å id –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ VK; id –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º\n\n" +
            "    /delete_info - —É–¥–∞–ª–∏—Ç—å –∏–∑ –±–æ—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–∏—Ö TG –∏ VK"
        );
    }

    const setVkId = async (ctx) => {
        /* –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ */
        const args = ctx.message.text.split(" ");
        if (args.length !== 2 || isNaN(parseInt(args[1]))) {
            await ctx.reply("‚ùå –£ –∫–æ–º–∞–Ω–¥—ã /set_vk_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä - –≤–∞—à id –≤ VK (–ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ, –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ id)");
            return ctx.replyWithMarkdownV2("–ù–∞–ø—Ä–∏–º–µ—Ä: `/set_vk_id 12345678`");
        }
        const vkId = args[1];
        const tgId = ctx.message.from.id.toString();

        try {
            /* –î–æ—Å—Ç–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ */
            const select = await pgPool.query(selectQuery, [vkId, tgId]);
            const row = select.rows[0];
            const status = row?.status;
            const id = row?.id;

            /* –ï—Å–ª–∏ –≤ –±–∞–∑–µ —É–∂–µ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º id –≤ VK, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º */
            const vkIdMatches = row?.vk_id.toString() === vkId;
            const tgIdMatches = row?.tg_id.toString() === tgId;
            if ((select.rowCount > 1) || (!tgIdMatches && vkIdMatches)) {
                await ctx.reply("–£–ø—Å... ‚õî –≠—Ç–æ—Ç VK id —Å–≤—è–∑–∞–Ω —Å id –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è TG!");
                await ctx.reply("–ï—Å–ª–∏ –≤—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ VK id - –≤–µ—Ä–Ω—ã–π, –≤–æ–∑–º–æ–∂–Ω–æ, –≤—ã –æ—à–∏–±–ª–∏—Å—å, –∫–æ–≥–¥–∞ —É–∫–∞–∑—ã–≤–∞–ª–∏ TG id –±–æ—Ç—É –≤ VK? ü§î");
                await ctx.reply("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ—Ç—É –≤ VK (https://vk.me/fwd2tg_bot) –∫–æ–º–∞–Ω–¥—É:", noPreview);
                return ctx.replyWithMarkdownV2("`/set_tg_id " + tgId + "`");
            }

            /* –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç, —Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º */
            if (status === ConfirmationStatus.CONFIRMED && vkIdMatches) {
                return ctx.reply("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ —Å–≤—è–∑–∞–Ω —Å —ç—Ç–∏–º VK id. –ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è! üòâ");
            }

            /* –ï—Å–ª–∏ –æ–∂–∏–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ –≤ TG –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ—Ç, —Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∑–∞–ø–∏—Å—å */
            if (status === ConfirmationStatus.WAIT_TG && vkIdMatches) {
                await pgPool.query(updateQuery, [vkId, tgId, ConfirmationStatus.CONFIRMED, id]);
                await ctx.reply("–í–∞—à id –≤ VK —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! ‚úÖ");
                await ctx.reply(`–ë–æ—Ç –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å—é–¥–∞: https://vk.com/id${vkId}`);
                await vk.api.messages.send({ user_id: vkId, random_id: 0, message: "–í–∞—à id –≤ TG —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! ‚úÖ" });
                return vk.api.messages.send({
                    user_id: vkId,
                    random_id: 0,
                    message: `–ë–æ—Ç –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å—é–¥–∞: https://t.me/${ctx.message.from.username}`
                });
            }

            /* –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ –≤ VK (–∫—Ä–æ–º–µ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –æ–Ω–æ —É–∂–µ –±—ã–ª–æ –∑–∞–ø—Ä–æ—à–µ–Ω–æ —Å —Ç–∞–∫–∏–º –∂–µ id) */
            if (!(status === ConfirmationStatus.WAIT_VK && vkIdMatches)) {
                if (row) {
                    await pgPool.query(updateQuery, [vkId, tgId, ConfirmationStatus.WAIT_VK, id]);
                } else {
                    await pgPool.query(insertQuery, [vkId, tgId, ConfirmationStatus.WAIT_VK]);
                }
            }
            await ctx.reply("–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –æ—Ç–∫—Ä–æ–π—Ç–µ –±–æ—Ç–∞ –≤ VK (https://vk.me/fwd2tg_bot) –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–º—É –∫–æ–º–∞–Ω–¥—É:", noPreview);
            return ctx.replyWithMarkdownV2("`/set_tg_id " + tgId + "`");
        } catch (error) {
            return dbErrorHandler(ctx, error);
        }
    }

    const deleteInfo = async (ctx) => {
        /* –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ */
        const args = ctx.message.text.split(" ");
        if (args.length !== 1) {
            return ctx.reply("‚ùå –£ –∫–æ–º–∞–Ω–¥—ã /delete_info –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤");
        }

        try {
            /* –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ –µ–≥–æ tg_id */
            const tgId = ctx.message.from.id;
            await pgPool.query(deleteQuery, [0, tgId]);
            return ctx.reply("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å—Ç–µ—Ä—Ç—ã! ‚úÖ");
        } catch (error) {
            return dbErrorHandler(ctx, error);
        }
    }

    const checkPairing = async (ctx, next) => {
        try {
            /* –î–æ—Å—Ç–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ –µ–≥–æ tg_id */
            const tgId = ctx.message.from.id
            const select = await pgPool.query(selectQuery, [0, tgId]);
            const row = select.rows[0];
            const vkId = row?.vk_id;

            /* –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–Ω–µ–µ –Ω–µ —É–∫–∞–∑–∞–ª —Å–≤–æ–π vk_id, —Ç–æ –∑–∞–ø–∏—Å–∏ –æ –Ω—ë–º –≤ –ë–î –Ω–µ—Ç */
            if (!row) {
                await ctx.reply("‚ùå –ë–æ—Ç –Ω–µ –∑–Ω–∞–µ—Ç, –∫—É–¥–∞ –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ - —É–∫–∞–∂–∏—Ç–µ –µ–º—É —Å–≤–æ–π id –≤ VK");
                return ctx.replyWithMarkdownV2("–ù–∞–ø—Ä–∏–º–µ—Ä: `/set_vk_id 12345678`");
            }

            /* –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ –≤ VK */
            if (row.status === ConfirmationStatus.WAIT_VK) {
                ctx.reply("‚ùå –í–∞—à id –≤ VK –ø–æ–∫–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω");
                await ctx.reply("–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –æ—Ç–∫—Ä–æ–π—Ç–µ –±–æ—Ç–∞ –≤ VK (https://vk.me/fwd2tg_bot) –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–º—É –∫–æ–º–∞–Ω–¥—É:", noPreview);
                return ctx.replyWithMarkdownV2("`/set_tg_id " + tgId + "`");
            }

            /* –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ –≤ TG */
            if (row.status === ConfirmationStatus.WAIT_TG) {
                await ctx.reply("‚ùå –í–∞—à id –≤ VK –ø–æ–∫–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω");
                return ctx.reply("–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É, –∫–æ—Ç–æ—Ä—É—é –≤–∞–º –æ—Ç–ø—Ä–∞–≤–∏–ª –±–æ—Ç –≤ VK (https://vk.me/fwd2tg_bot)", noPreview);
            }

            /* –í—ã–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ */
            ctx.tgId = tgId;
            ctx.vkId = vkId;
            return next();
        } catch (error) {
            return dbErrorHandler(ctx, error);
        }
    }

    const uploadPhoto = async (ctx, next) => {
        /* –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ TG */
        const photo = ctx.message.photo.pop()
        const url = await ctx.telegram.getFileLink(photo);

        /* –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ –∏ –≤—ã–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ */
        ctx.attachment = await vk.upload.messagePhoto({
            source: {
                value: url.toString()
            }
        });
        ctx.message.text = ctx.message.caption ?? "";
        return next();
    }

    const uploadVoice = async (ctx, next) => {
        /* –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ TG */
        const voice = ctx.message.voice;
        const url = await ctx.telegram.getFileLink(voice);

        /* –ó–∞–≥—Ä—É–∂–∞–µ–º –≥—Å –∏ –≤—ã–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ */
        ctx.attachment = await vk.upload.audioMessage({
            source: {
                value: url.toString()
            },
            peer_id: ctx.vkId
        });
        ctx.message.text = "";
        return next();
    }

    const uploadSticker = async (ctx, next) => {
        /* –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è */
        if (ctx.message.sticker.is_animated) {
            return unsupportedMessageHandler(ctx);
        }

        /* –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ TG */
        const sticker = ctx.message.sticker;
        const url = await ctx.telegram.getFileLink(sticker);

        /* –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∏–∫–µ—Ä –∏ –≤—ã–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ */
        ctx.attachment = await vk.upload.messagePhoto({
            source: {
                value: url.toString()
            },
        });
        ctx.message.text = ctx.message.caption ?? "";
        return next();
    }

    const uploadDocument = async (ctx, next) => {
        /* –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –∏ –ø–æ–ª—É—á–∞–µ–º –Ω–∞ –Ω–µ–≥–æ —Å—Å—ã–ª–∫—É */
        const document = ctx.message.document ?? ctx.message.video ?? ctx.message.video_note ?? ctx.message.audio ?? ctx.message.animation;
        if (document.file_size > MAX_DOWNLOAD_SIZE) {
            await ctx.reply("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ—Ç —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π üòî");
            return ctx.reply("–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è Telegram Bot API –∑–∞–ø—Ä–µ—â–∞–µ—Ç –±–æ—Ç–∞–º —Å–∫–∞—á–∏–≤–∞—Ç—å —Ñ–∞–π–ª—ã –≤–µ—Å–æ–º –±–æ–ª—å—à–µ 20 –ú–±")
        }
        const url = await ctx.telegram.getFileLink(document);

        /* –ò–∑–º–µ–Ω—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è –∞—É–¥–∏–æ */
        if (ctx.message.audio && document.file_name.match(/.+\.(mp3|m4a)$/)) {
            document.file_name += ".audio";
        }

        /* –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–º—è –¥–ª—è –∫—Ä—É–∂–∫–∞ */
        if (ctx.message.video_note) {
            document.file_name += document.file_unique_id + ".mp4";
        }

        /* –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –∏ –≤—ã–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ */
        ctx.attachment = await vk.upload.messageDocument({
            source: {
                value: url.toString(),
                filename: document.file_name
            },
            peer_id: ctx.vkId
        });
        ctx.message.text = ctx.message.caption ?? "";
        return next();
    }

    const forwardMessage = async (ctx) => {
        /* –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ VK */
        const attachment = ctx.attachment;
        if (ctx.message.forward_from || ctx.message.forward_from_chat) {
            await vk.api.messages.send({
                user_id: ctx.vkId,
                random_id: 0,
                message: `‚¨á –û—Ç t.me/${(ctx.message.forward_from ?? ctx.message.forward_from_chat).username} ‚¨á`,
                ...noLinks
            }).catch((error) => vkSendErrorHandler(ctx, error));
        }
        return vk.api.messages.send({
            user_id: ctx.vkId,
            random_id: 0,
            message: ctx.message.text,
            attachment
        }).catch((error) => vkSendErrorHandler(ctx, error));
    }

    const dbErrorHandler = async (ctx, error) => {
        console.log(error);
        await ctx.reply("–í–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö üò¨");
        return ctx.reply("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!");
    }

    const vkSendErrorHandler = async (ctx, error) => {
        console.log(error);
        await ctx.reply(`–ë–æ—Ç –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º https://vk.com/id${ctx.vkId}, –Ω–æ –Ω–µ —Å–º–æ–≥ üòî`);
        return ctx.reply("–í–æ–∑–º–æ–∂–Ω–æ, id —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Å –Ω–∞—à–∏–º –±–æ—Ç–æ–º –≤ VK (https://vk.me/fwd2tg_bot)");
    }

    const unsupportedMessageHandler = (ctx) => {
        return ctx.reply("‚ùå –≠—Ç–æ—Ç —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è");
    }

    telegraf.command("start", start);
    telegraf.command("help", help);
    telegraf.command("set_vk_id", setVkId);
    telegraf.command("delete_info", deleteInfo);
    telegraf.use(checkPairing);
    telegraf.on("voice", uploadVoice);
    telegraf.on("photo", uploadPhoto);
    telegraf.on("sticker", uploadSticker);
    telegraf.on(["document", "video", "video_note", "audio", "animation"], uploadDocument);
    telegraf.on("text", forwardMessage);
    telegraf.use(unsupportedMessageHandler);

    const handleUpdate = (update) => {
        return telegraf.handleUpdate(update);
    }

    return { handleUpdate };
}

module.exports = { TgBot };